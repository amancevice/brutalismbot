{
  "Comment": "Mirror posts from /r/brutalism to clients",
  "StartAt": "Route Input",
  "States": {
    "Route Input": {
      "Comment": "Route input for faster results",
      "Type": "Choice",
      "Default": "Pull Reddit Posts",
      "Choices": [
        {
          "Variable": "$.Posts",
          "IsPresent": true,
          "Next": "For Each Post"
        }
      ]
    },
    "Pull Reddit Posts": {
      "Comment": "Pull new posts from /r/brutalism and cache on S3",
      "Type": "Task",
      "Resource": "${reddit_pull_lambda_arn}",
      "ResultPath": "$.Posts",
      "Next": "For Each Post",
      "Retry": [
        {
          "IntervalSeconds": 15,
          "MaxAttempts": 6,
          "BackoffRate": 2,
          "ErrorEquals": [
            "CalledProcessError",
            "JSON::ParserError",
            "Lambda.SdkClientException",
            "Lambda.ServiceException",
            "Lambda.Unknown"
          ]
        }
      ]
    },
    "For Each Post": {
      "Comment": "Iterate over each new post",
      "Type": "Map",
      "ItemsPath": "$.Posts",
      "End": true,
      "Parameters": {
        "Post.$": "$$.Map.Item.Value"
      },
      "Iterator": {
        "StartAt": "Push to Clients",
        "States": {
          "Push to Clients": {
            "Comment": "Start state machines for each client",
            "Type": "Parallel",
            "End": true,
            "Branches": [
              {
                "StartAt": "Pull Slack Webhooks",
                "States": {
                  "Pull Slack Webhooks": {
                    "Type": "Task",
                    "Resource": "${slack_list_lambda_arn}",
                    "ResultPath": "$.WebhookUrls",
                    "Next": "For Each Webhook",
                    "Retry": [
                      {
                        "IntervalSeconds": 3,
                        "MaxAttempts": 6,
                        "BackoffRate": 2,
                        "ErrorEquals": [
                          "CalledProcessError",
                          "Lambda.SdkClientException",
                          "Lambda.ServiceException",
                          "Lambda.Unknown"
                        ]
                      }
                    ]
                  },
                  "For Each Webhook": {
                    "Type": "Map",
                    "ItemsPath": "$.WebhookUrls",
                    "End": true,
                    "Parameters": {
                      "Post.$": "$.Post",
                      "WebhookUrl.$": "$$.Map.Item.Value"
                    },
                    "Iterator": {
                      "StartAt": "Slack",
                      "States": {
                        "Slack": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::states:startExecution",
                          "OutputPath": "$.ExecutionArn",
                          "End": true,
                          "Parameters": {
                            "StateMachineArn": "${slack_state_machine_arn}",
                            "Input": {
                              "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                              "bucket.$": "$.Post.bucket",
                              "key.$": "$.Post.key",
                              "url.$": "$.Post.url",
                              "webhook_url.$": "$.WebhookUrl"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "StartAt": "Tweet",
                "States": {
                  "Tweet": {
                    "Comment": "Push post to Twitter",
                    "Type": "Task",
                    "Resource": "arn:aws:states:::states:startExecution",
                    "OutputPath": "$.ExecutionArn",
                    "End": true,
                    "Parameters": {
                      "StateMachineArn": "${twitter_state_machine_arn}",
                      "Input": {
                        "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                        "bucket.$": "$.Post.bucket",
                        "key.$": "$.Post.key",
                        "url.$": "$.Post.url"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}
